// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DbManager is an autogenerated mock type for the DbManager type
type DbManager struct {
	mock.Mock
}

type DbManager_Expecter struct {
	mock *mock.Mock
}

func (_m *DbManager) EXPECT() *DbManager_Expecter {
	return &DbManager_Expecter{mock: &_m.Mock}
}

// CancelWithdrawal provides a mock function with given fields: ctx, clientId, serviceId, orderId, amount
func (_m *DbManager) CancelWithdrawal(ctx context.Context, clientId int64, serviceId int64, orderId int64, amount int64) (bool, error) {
	ret := _m.Called(ctx, clientId, serviceId, orderId, amount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, int64) bool); ok {
		r0 = rf(ctx, clientId, serviceId, orderId, amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, int64) error); ok {
		r1 = rf(ctx, clientId, serviceId, orderId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbManager_CancelWithdrawal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWithdrawal'
type DbManager_CancelWithdrawal_Call struct {
	*mock.Call
}

// CancelWithdrawal is a helper method to define mock.On call
//  - ctx context.Context
//  - clientId int64
//  - serviceId int64
//  - orderId int64
//  - amount int64
func (_e *DbManager_Expecter) CancelWithdrawal(ctx interface{}, clientId interface{}, serviceId interface{}, orderId interface{}, amount interface{}) *DbManager_CancelWithdrawal_Call {
	return &DbManager_CancelWithdrawal_Call{Call: _e.mock.On("CancelWithdrawal", ctx, clientId, serviceId, orderId, amount)}
}

func (_c *DbManager_CancelWithdrawal_Call) Run(run func(ctx context.Context, clientId int64, serviceId int64, orderId int64, amount int64)) *DbManager_CancelWithdrawal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *DbManager_CancelWithdrawal_Call) Return(_a0 bool, _a1 error) *DbManager_CancelWithdrawal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, amount
func (_m *DbManager) CreateUser(ctx context.Context, amount int64) (int64, error) {
	ret := _m.Called(ctx, amount)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbManager_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type DbManager_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - amount int64
func (_e *DbManager_Expecter) CreateUser(ctx interface{}, amount interface{}) *DbManager_CreateUser_Call {
	return &DbManager_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, amount)}
}

func (_c *DbManager_CreateUser_Call) Run(run func(ctx context.Context, amount int64)) *DbManager_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DbManager_CreateUser_Call) Return(_a0 int64, _a1 error) *DbManager_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, userId
func (_m *DbManager) GetBalance(ctx context.Context, userId int64) (int64, error) {
	ret := _m.Called(ctx, userId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbManager_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type DbManager_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//  - ctx context.Context
//  - userId int64
func (_e *DbManager_Expecter) GetBalance(ctx interface{}, userId interface{}) *DbManager_GetBalance_Call {
	return &DbManager_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, userId)}
}

func (_c *DbManager_GetBalance_Call) Run(run func(ctx context.Context, userId int64)) *DbManager_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DbManager_GetBalance_Call) Return(_a0 int64, _a1 error) *DbManager_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ProcessWithdrawal provides a mock function with given fields: ctx, clientId, serviceId, orderId, Amount
func (_m *DbManager) ProcessWithdrawal(ctx context.Context, clientId int64, serviceId int64, orderId int64, Amount int64) (bool, error) {
	ret := _m.Called(ctx, clientId, serviceId, orderId, Amount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, int64) bool); ok {
		r0 = rf(ctx, clientId, serviceId, orderId, Amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, int64) error); ok {
		r1 = rf(ctx, clientId, serviceId, orderId, Amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbManager_ProcessWithdrawal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessWithdrawal'
type DbManager_ProcessWithdrawal_Call struct {
	*mock.Call
}

// ProcessWithdrawal is a helper method to define mock.On call
//  - ctx context.Context
//  - clientId int64
//  - serviceId int64
//  - orderId int64
//  - Amount int64
func (_e *DbManager_Expecter) ProcessWithdrawal(ctx interface{}, clientId interface{}, serviceId interface{}, orderId interface{}, Amount interface{}) *DbManager_ProcessWithdrawal_Call {
	return &DbManager_ProcessWithdrawal_Call{Call: _e.mock.On("ProcessWithdrawal", ctx, clientId, serviceId, orderId, Amount)}
}

func (_c *DbManager_ProcessWithdrawal_Call) Run(run func(ctx context.Context, clientId int64, serviceId int64, orderId int64, Amount int64)) *DbManager_ProcessWithdrawal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *DbManager_ProcessWithdrawal_Call) Return(_a0 bool, _a1 error) *DbManager_ProcessWithdrawal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Refill provides a mock function with given fields: ctx, userId, amount
func (_m *DbManager) Refill(ctx context.Context, userId int64, amount int64) (bool, error) {
	ret := _m.Called(ctx, userId, amount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, userId, amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbManager_Refill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refill'
type DbManager_Refill_Call struct {
	*mock.Call
}

// Refill is a helper method to define mock.On call
//  - ctx context.Context
//  - userId int64
//  - amount int64
func (_e *DbManager_Expecter) Refill(ctx interface{}, userId interface{}, amount interface{}) *DbManager_Refill_Call {
	return &DbManager_Refill_Call{Call: _e.mock.On("Refill", ctx, userId, amount)}
}

func (_c *DbManager_Refill_Call) Run(run func(ctx context.Context, userId int64, amount int64)) *DbManager_Refill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *DbManager_Refill_Call) Return(_a0 bool, _a1 error) *DbManager_Refill_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Withdrawal provides a mock function with given fields: ctx, clientId, serviceId, orderId, Amount
func (_m *DbManager) Withdrawal(ctx context.Context, clientId int64, serviceId int64, orderId int64, Amount int64) (bool, error) {
	ret := _m.Called(ctx, clientId, serviceId, orderId, Amount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, int64) bool); ok {
		r0 = rf(ctx, clientId, serviceId, orderId, Amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, int64) error); ok {
		r1 = rf(ctx, clientId, serviceId, orderId, Amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbManager_Withdrawal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdrawal'
type DbManager_Withdrawal_Call struct {
	*mock.Call
}

// Withdrawal is a helper method to define mock.On call
//  - ctx context.Context
//  - clientId int64
//  - serviceId int64
//  - orderId int64
//  - Amount int64
func (_e *DbManager_Expecter) Withdrawal(ctx interface{}, clientId interface{}, serviceId interface{}, orderId interface{}, Amount interface{}) *DbManager_Withdrawal_Call {
	return &DbManager_Withdrawal_Call{Call: _e.mock.On("Withdrawal", ctx, clientId, serviceId, orderId, Amount)}
}

func (_c *DbManager_Withdrawal_Call) Run(run func(ctx context.Context, clientId int64, serviceId int64, orderId int64, Amount int64)) *DbManager_Withdrawal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *DbManager_Withdrawal_Call) Return(_a0 bool, _a1 error) *DbManager_Withdrawal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewDbManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewDbManager creates a new instance of DbManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDbManager(t mockConstructorTestingTNewDbManager) *DbManager {
	mock := &DbManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
